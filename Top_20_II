0. What is Lifting State Up in React?
Lifting State Up is a concept in React where you move the shared state of multiple components to a common parent component, which then becomes the single source of truth for that state. This allows you to manage and synchronize the state changes across different components more effectively.

When you have multiple components that need to share and update the same data, it's often a good idea to lift that shared state up to a common ancestor component. This ensures that the data remains consistent and avoids situations where different components have their own copies of the same data, leading to synchronization issues.

Benefits of Lifting State Up:

Single Source of Truth: By lifting the state to a common parent component, you ensure that there is only one place where the data is stored and updated. This reduces the chances of inconsistencies.

Improved Data Flow: Lifting state up simplifies the data flow between components. Child components receive the state data as props from the parent and communicate state changes back to the parent through callback functions.

Easier Debugging: When the state is managed in a centralized manner, it becomes easier to debug and trace the flow of data and changes.

Reusability: Lifting state up promotes the creation of more reusable and modular components, as they can access and modify shared state without duplicating it.

Example Scenario:
Imagine you have a form with multiple input fields, and you want to display and update the form data in different parts of your application. Instead of managing the form data separately in each component that uses it, you can lift the form data state to a higher-level parent component. This parent component manages the form data and passes it down to the child components as props. When a user interacts with the form inputs, the child components notify the parent component to update the form data, which then triggers a re-render of the child components with the updated data.

Lifting State Up is a fundamental principle in React's approach to managing state and building maintainable and scalable applications. It promotes better data flow, reusability, and consistency across components.


1. What is React context?

React Context is a feature in the React library that allows you to share state or data between components without the need to pass props through multiple levels of component hierarchy. It provides a way to share data that can be considered "global" for a tree of React components, eliminating the need to manually pass props down from parent to child components.

With React Context, you can create a "context" object that holds the data you want to share. This context object can then be accessed by any component within its defined scope, regardless of how deeply nested that component is in the component tree.

React Context is particularly useful for scenarios where you have data that many components need to access, such as user authentication status, themes, and localization settings. It simplifies the process of managing and sharing this kind of data, making your component code cleaner and more maintainable.

Here's a basic example of how React Context works:

Create a Context: You define a context using the React.createContext() function.

Provide the Context: Wrap the components that need access to the context data within a <Context.Provider> component. This provides the data to those components.

Consume the Context: Use the useContext hook (or the Context.Consumer component) to access the context data within your components.


2. What are different ways to add CSS in your app?
1 - External Stylesheet
You can create a new CSS file in your project directory and add your CSS inside it. It can then be imported into your React component or class. The following code is used to import an external CSS stylesheet.

import "./styles.css";
2 - Inline CSS
Inline CSS is perhaps the most common and quick method to add styles in React. However, it has several drawbacks and is generally discouraged, especially for larger applications.

To implement inline CSS, you can create an object containing style references, which can be then called using the style{} attribute. For example:

const styles = {
  section: {
    fontSize: "18px",
    color: "#292b2c",
    backgroundColor: "#fff",
    padding: "0 20px"
  },
  wrapper: {
    textAlign: "center",
    margin: "0 auto",
    marginTop: "50px"
  }
}
It is then added to an element like this:

<section style={styles.section}>
  <div style={styles.wrapper}>
  </div>
</section>
3 - Styled Components
Probably the most powerful and useful in my opinion is Styled Components. Styled Components lets you write actual CSS in your JavaScript. The main advantage is that you can add conditional code and use variables and functions within the CSS.

You can install Styled Components using the following command:

npm install --save styled-components
Next, you need to import it into your component. Then you can create a new variable that will contain the CSS. The same variable name can be used to an HTML element with the previously added styles on it.

import styled from 'styled-components'
// Create a button variable and add CSS
const Button = styled.button`
  background: transparent;
  border-radius: 3px;
  border: 2px solid red;
  color:red;
`
//display the HTML
return (
  <div>
    <Button>Button</Button>
  </div>
);
4 - CSS Modules
You can also add scoped styles quite easily, you just need to create a file with the extension .module.css, like this:

// ComponentName.module.css

.Red {
  color: #f00;
}

.Blue {
  color: #00f;
}
Then you import it like this:

import styles from "./ComponentName.module.css";
and use it like this:

<span className={styles.Red}>This text will be red</span>
<span className={styles.Blue}>This text will be blue</span>
5 - Atomic CSS
One of the most popular atomic CSS frameworks out there is Tailwind, by just making it part of your project following their instructions you can just use classNames without even touching CSS.

<button className="font-bold bg-blue-600 px-6 py-3 text-white rounded-md">Blue button</button>
6 - Emotion
Styled-components is not the only library that allows you to create components with styles embedded on them, you have great alternatives out there such as Emotion. The best thing about Emotion is that it's framework agnostic, so you can take your knowledge to other libraries and frameworks besides React, while being pretty similar to styled-components (so you can in several scenarios just change the import).


3. What is Hot Module Replacement?
Hot Module Replacement (HMR) is a feature in modern web development frameworks, such as React, Vue.js, and webpack, that allows developers to update code in real-time without requiring a full page reload. It significantly speeds up the development process by enabling you to see immediate changes to your code without losing the application's state.

Here's how Hot Module Replacement works:

Detecting Changes: During development, when you make changes to your code files (such as JavaScript, CSS, or templates), the development server detects those changes.

Hot Patching: Instead of reloading the entire page, HMR applies the updated code for the changed module dynamically, "hot patching" the running application.

Preserving State: HMR preserves the application's current state, including variables, component states, and other runtime data. This means you can see your changes instantly without losing the context of your application.

Fast Feedback Loop: HMR reduces the need to manually trigger a page refresh or re-navigate through the application to see changes. This results in a faster development feedback loop and increased productivity.

For example, if you're developing a React application and you modify a component's code, HMR will automatically update the component on the page without causing a full page reload. This allows you to immediately see the effect of your changes and make adjustments more efficiently.

Keep in mind that while HMR is a powerful tool for improving development speed, it might not handle all types of changes seamlessly. Some complex changes or changes deep within the component tree might still require a full page reload. Additionally, the setup of HMR might vary depending on the framework or build tools you are using.

In summary, Hot Module Replacement is a developer productivity tool that enhances the development experience by enabling real-time code updates, preserving application state, and reducing the need for manual page refreshes during development.

4. What is the use of Parcel, Vite, Webpack?

Parcel, Vite, and webpack are all popular build tools used in modern web development to bundle and optimize web applications, but they have different features and strengths.

Parcel:

Parcel is a "zero-config" build tool, which means it requires minimal configuration setup. It automatically detects and configures assets like HTML, JavaScript, CSS, and images, making it very easy to get started.
It supports a wide range of file types and automatically handles their dependencies.
Parcel is known for its simplicity and fast setup. It's a great choice for smaller projects and developers who want to avoid complex configuration.

Vite:

Vite is a build tool that is optimized for speed during development. It leverages ES modules and native browser features to achieve fast startup times.
Vite is particularly well-suited for modern frameworks like Vue.js and React, as it allows for near-instantaneous development server startup and HMR (Hot Module Replacement) without the need for bundling during development.
In production, Vite still optimizes and bundles assets for optimal performance.

Webpack:

Webpack is a highly configurable and powerful build tool that can handle complex scenarios. It's widely used in large-scale applications.
It can bundle not only JavaScript but also other assets like CSS, images, fonts, and more.
Webpack supports code splitting, lazy loading, and tree shaking to optimize the size of the final bundle.
While Webpack's configuration can be complex, it offers a lot of flexibility and customization options.
In summary:

Parcel is great for quick and simple setups, best suited for smaller projects where you want to avoid configuration overhead.
Vite is designed for fast development and works well with modern frameworks. It's ideal if you want rapid feedback during development.
Webpack is a versatile and powerful tool for more complex projects, offering fine-grained control over the build process and optimizations.
The choice between these tools depends on your project's size, complexity, and your personal preferences. Each tool has its strengths, so consider your specific needs when making a decision.


5. How does create-react-app work?

create-react-app is a command-line tool provided by Facebook (now Meta) that helps you quickly set up and bootstrap a new React.js application with a predefined project structure and a set of default configurations. It abstracts away the complex setup and configuration process, allowing you to focus on writing React code right away.

Here's how create-react-app works:

Installation: You need to have Node.js and npm (Node Package Manager) installed on your system. You can then install create-react-app globally using the following command:


npm install -g create-react-app
Creating a New Project: Once create-react-app is installed, you can create a new React project by running:

npx create-react-app my-app
This command will create a new directory named my-app with the default project structure and configuration files.

Project Structure: The project structure generated by create-react-app includes various folders and files:

src: This folder contains your application's source code, including React components, CSS, and other assets.
public: This folder contains the static assets that don't need to go through the build process, like HTML files and images.
node_modules: This folder holds all the project's dependencies.
package.json: This file includes information about the project and its dependencies, as well as scripts to run various commands.
public/index.html: The main HTML file that serves as the entry point for your React application.
src/index.js: The main JavaScript file where you typically start building your React app.
Configuration: create-react-app abstracts away most of the complex configuration by providing sensible defaults. However, you can still customize the configuration by using certain environment variables or by ejecting the project (which exposes the configuration files so you can modify them directly).

Development and Build: You can start the development server using the npm start command. This will build your app, start a development server, and enable hot module replacement (HMR) for real-time updates as you make changes to your code. For building the production-ready version of your app, you can use the npm run build command, which generates optimized and minified files ready for deployment.

In summary, create-react-app simplifies the process of setting up a new React project by generating a project structure, handling configuration, and providing scripts for development and production builds. It's an excellent tool for beginners and developers who want to focus on coding rather than dealing with configuration complexities.

6. What is Tree Shaking?

Tree shaking is a technique used in modern JavaScript build processes to eliminate dead code from your application's final bundle, resulting in smaller and more efficient code. The term "tree shaking" comes from the idea of shaking a tree to remove dead leaves, in this case, unused code.

Tree shaking works by analyzing the static structure of your code and its dependencies to determine which parts of the code are actually being used and which parts are not. It then removes the unused parts during the bundling process, reducing the size of the output bundle.

This technique is particularly useful when working with modern module systems like ES6 modules, where dependencies are declared explicitly. Tree shaking can identify and eliminate:

Unused Imports: If you import a module but don't use any of its exported functions, variables, or classes, tree shaking will exclude that import from the final bundle.

Dead Code: If you have code that is unreachable or unused within your application, tree shaking will identify and remove it.

Here's a simple example to illustrate tree shaking:


// moduleA.js
export function add(a, b) {
  return a + b;
}

export function subtract(a, b) {
  return a - b;
}

// index.js
import { add } from './moduleA';

console.log(add(5, 3));
In this example, even though both add and subtract functions are exported from moduleA, only the add function is used in the index.js file. When the code is bundled, tree shaking will exclude the subtract function from the final bundle, resulting in a smaller output file.

To take advantage of tree shaking, it's important to use a build tool that supports it, such as webpack. Additionally, writing modular and import-only-what-you-need code patterns can help maximize the benefits of tree shaking. Keep in mind that not all code can be tree shaken – for example, if functions are dynamically imported or if they have side effects, they might not be eliminated even if they are seemingly unused.


7. Difference b/w dependency and devDependency

In the context of Node.js and npm (Node Package Manager), there are two main types of dependencies that you can specify in your package.json file: dependencies and devDependencies. These serve different purposes in your project's development and deployment lifecycle.

dependencies:

Dependencies listed under the dependencies section are packages that your application or project relies on to run correctly in a production environment.
These packages are necessary for the application to function as intended. They include libraries, frameworks, and utilities that your code directly depends on during runtime.
When you deploy your application or share it with others, both the production code and the packages listed under dependencies will be bundled together.
devDependencies:

devDependencies are packages that are only required during development and are not necessary for the application to run in a production environment.
These packages include tools, testing frameworks, build scripts, and development-specific utilities that help you with tasks like testing, linting, compiling, and building.
Dev dependencies are not included when your application is deployed or distributed to end-users. They are used by developers during the development process to enhance the workflow.
Since these packages are not needed in production, excluding them from the final bundle can help reduce the size of your application.
Here's a simplified example of a package.json file that illustrates the distinction:

json
Copy code
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  },
  "devDependencies": {
    "webpack": "^5.50.0",
    "babel": "^7.14.6",
    "jest": "^27.1.1"
  }
}
In this example, react and react-dom are listed as dependencies because they are required for the application to function correctly. On the other hand, webpack, babel, and jest are listed as devDependencies because they are development tools used during the development process.

Separating dependencies in this manner helps keep your production bundle lean by excluding development-specific tools and utilities. It also makes it clear which packages are necessary for end-users and which are used solely by developers.


8. What is npx and npm?

npx and npm are both command-line tools that are part of the Node.js ecosystem. They are used for managing and working with JavaScript packages, running scripts, and managing dependencies for your projects.

npm (Node Package Manager):

npm is the default package manager for Node.js and is used to install, manage, and share packages of code (libraries, frameworks, utilities) that can be used in JavaScript projects.
It allows you to easily install third-party packages from the npm registry into your project.
You can specify project dependencies in your package.json file, which npm uses to keep track of your project's dependencies and versions.
You can also use npm to manage project scripts, such as running build processes, tests, or starting your application.
npx:

npx is a tool that comes with npm and stands for "Node Package Runner." It's used to execute packages and binaries that are not globally installed or are not in your project's node_modules folder.
With npx, you can run a package or binary directly from the command line without installing it globally or adding it to your project's dependencies.
It's particularly useful for running command-line tools that are packaged as npm packages.
For example, you can use npx create-react-app my-app to create a new React application without having to globally install the create-react-app package.
In summary:

npm: It's a package manager used for installing and managing JavaScript packages, as well as running scripts for your projects.
npx: It's a tool that comes with npm and allows you to run packages and binaries that aren't globally installed or aren't part of your project's dependencies.
Both npm and npx are powerful tools that are commonly used in the JavaScript and Node.js development ecosystem to manage dependencies, execute scripts, and streamline development workflows.


9. Difference b/w package .json and package-lock .json

package.json and package-lock.json are both files used in the Node.js ecosystem to manage dependencies and version information for a project. However, they serve different purposes and have distinct roles in the dependency management process.

package.json:

package.json is the primary configuration file for a Node.js project. It contains metadata about the project, such as its name, version, description, author, and more.
It also includes a list of the project's dependencies and dev dependencies, along with their respective version constraints.
You can manually modify this file to add, remove, or update dependencies, as well as to specify scripts that can be run using npm.
The package.json file is often versioned in version control systems (such as Git) and is meant to be shared with collaborators.
package-lock.json:

package-lock.json is automatically generated by npm when you install or update dependencies using the npm install command. It is used to provide a detailed and deterministic description of the installed packages and their versions.
This file includes the specific version numbers and commit hashes of the dependencies and their dependencies (recursive tree), ensuring that the exact same versions are installed across different environments.
The package-lock.json file helps prevent the "dependency hell" problem by ensuring consistent and reproducible installations across different machines and environments.
Unlike the package.json file, package-lock.json should not typically be manually edited, as it is managed by npm.
In summary, while both package.json and package-lock.json are involved in managing dependencies, package.json primarily contains project metadata and dependency declarations, while package-lock.json provides a detailed snapshot of the installed dependencies to ensure consistency and reproducibility.


10. Difference between console .log(<HeaderComponent/>) and console .log(HeaderComponent());

The difference between console.log(<HeaderComponent/>) and console.log(HeaderComponent()); lies in how they handle the rendering of a React component.

console.log(<HeaderComponent/>):

In React, JSX (JavaScript XML) syntax allows you to write components in a format that resembles HTML elements.
When you use console.log(<HeaderComponent/>), you are logging the JSX expression itself. This will not actually render the HeaderComponent in the browser's DOM or display it as intended.
console.log(HeaderComponent()):

Assuming HeaderComponent is a function that returns JSX or a React element, calling HeaderComponent() will invoke the function and return the JSX or React element returned by it.
By using console.log(HeaderComponent()), you are logging the result of rendering the component. This will display the component's rendered output in the console, which is usually the React element structure.
For example, let's consider a simple React component:


function HeaderComponent() {
  return <h1>Hello, World!</h1>;
}
If you were to use console.log(<HeaderComponent/>), you would see the JSX expression itself in the console, which might look like:


<h1>Hello, World!</h1>
If you were to use console.log(HeaderComponent()), you would see the rendered output of the component, which might look like:


<h1>Hello, World!</h1>
In both cases, the console output doesn't reflect the actual rendering in the browser's DOM. To render the component in the browser, you would need to include it within your React application's render hierarchy using ReactDOM.render() or by placing it within other components in your JSX code.



11. What is React.Fragment?
12. What is the purpose of dependency array in useEffect? What is the difference when it is used and when it is not used?
13. What if 2 components are given will the state change in one component will effect the other component’s state (child)?
14. What is the use of return in useEffect ?
15. Difference b/w client-side routing and server-side routing?

16. Explain the concept of code splitting and its benefits in React.
17. How does React handle routing and navigation?
18. What are higher-order components (HOC) in React?
19. What are controlled and uncontrolled components?
20. Explain the concept of reconciliation in React.
